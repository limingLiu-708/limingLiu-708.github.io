<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GitHub+Nodejs+Hexo+Git 搭建个人博客</title>
      <link href="//2202687608.html"/>
      <url>//2202687608.html</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="GitHub-Nodejs-Hexo-Git-搭建个人博客"><a href="#GitHub-Nodejs-Hexo-Git-搭建个人博客" class="headerlink" title="GitHub+Nodejs+Hexo+Git 搭建个人博客"></a>GitHub+Nodejs+Hexo+Git 搭建个人博客</h1><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><p>参考网站：<a href="https://blog.csdn.net/weixin_52799373/article/details/123840137">https://blog.csdn.net/weixin_52799373/article/details/123840137</a></p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>参考网站：<a href="https://www.cnblogs.com/xueweisuoyong/p/11914045.html">https://www.cnblogs.com/xueweisuoyong/p/11914045.html</a></p><h2 id="博客生成-windows"><a href="#博客生成-windows" class="headerlink" title="博客生成(windows)"></a>博客生成(windows)</h2><h3 id="创建GitHub仓库"><a href="#创建GitHub仓库" class="headerlink" title="创建GitHub仓库"></a>创建GitHub仓库</h3><p><img src="../images/GitHub-Nodejs-Hexo-Git-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220601225900802-16549138386061.png" alt="image-20220601225900802"></p><p>仓库名前缀一定要和GitHub ID一致，然后加上 .github.io</p><h3 id="通过Hexo创建本地资源"><a href="#通过Hexo创建本地资源" class="headerlink" title="通过Hexo创建本地资源"></a>通过Hexo创建本地资源</h3><p>一、创建博客本地文件夹，D:\MyBlog</p><p>二、进入该目录后，使用Git Bash Here<br>安装Hexo环境 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli </span><br></pre></td></tr></table></figure><p>初始化hexo</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>生成本地hexo页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo cl </span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>本地访问<br>    浏览器访问：<a href="http://localhost:4000/">http://localhost:4000/</a></p><h3 id="生成SSH"><a href="#生成SSH" class="headerlink" title="生成SSH"></a>生成SSH</h3><p>通过生成SSH实现客户端和GitHub互相认证<br>参考网址：<a href="https://zhuanlan.zhihu.com/p/81338250">https://zhuanlan.zhihu.com/p/81338250</a></p><p>通过代码生成SSH Key</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;GitHub注册邮箱&quot;  </span><br></pre></td></tr></table></figure><p>在GitHub账号中添加该SSH Key</p><ol><li>打开本地C:\Users\dawn.ssh\id_rsa.pub复制该内容</li><li>在GitHub -&gt; Settings -&gt; SSH and GPG keys -&gt; New SSH key，将其复制到Key中</li><li>测试设置是否成功<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></li></ol><p>设置本地用户认证信息，用于信息上传时Github识别用户</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub ID&quot;</span><br><span class="line">git config --global user.email GitHub注册邮箱</span><br></pre></td></tr></table></figure><h3 id="将本地资源上传至Github"><a href="#将本地资源上传至Github" class="headerlink" title="将本地资源上传至Github"></a>将本地资源上传至Github</h3><p>一、修改博客本地文件夹中的配置文件：_config.yml<br><img src="../images/GitHub-Nodejs-Hexo-Git-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/image-20220601222914530-16549138386062.png"></p><p>其中项目地址需要更改为自己博客项目所在的地址；</p><p>二、部署<br>安装部署工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>生成页面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo cl</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure><p>部署</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><p>访问<br>通过浏览器浏览：<a href="https://limingliu-708.github.io/">https://limingliu-708.github.io/</a></p><p>到这一步整个博客就部署完毕，接下来就是定制自己主页的内容以及博客的部署；</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><p><a href="https://blog.csdn.net/wushibo123/article/details/124619123">https://blog.csdn.net/wushibo123/article/details/124619123</a></p></li><li><p><a href="https://dhndzwxj.vercel.app/3276806131.html">https://dhndzwxj.vercel.app/3276806131.html</a></p></li><li><p><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 博客搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git简介与基本使用</title>
      <link href="//3982244113.html"/>
      <url>//3982244113.html</url>
      
        <content type="html"><![CDATA[<h1 id="git介绍"><a href="#git介绍" class="headerlink" title="git介绍"></a>git介绍</h1><p>git是开源的分布式版本控制系统，用于敏捷高效维护项目的开发和管理；</p><p>git官网：<a href="https://git-scm.com/">https://git-scm.com/</a> </p><h2 id="git工作机制"><a href="#git工作机制" class="headerlink" title="git工作机制"></a>git工作机制</h2><div align='center'>  <img src='../images/git%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/git-process-16545904214411.png' width=450px>  <p align='center' style='font-size:15px;font-family:kaiti;color:red'> </p></div><p>一般工作流程如下：</p><ol><li>克隆 Git 资源作为工作目录</li><li>在克隆的资源上添加或修改文件</li><li>如果其他人修改了，可以更新资源</li><li>在提交前查看修改</li><li>提交修改</li><li>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交</li></ol><p>工作区、暂存区、版本库三者关系</p><p><img src="../images/git%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/1352126739_7909.jpg" alt="img"></p><ol><li><strong>工作区：</strong>就是你在电脑里能看到的目录；</li><li><strong>暂存区：</strong>英文叫 stage 或 index。一般存放在 <strong>.git</strong> 目录下的 index 文件（.git&#x2F;index）中，所以我们把暂存区有时也叫作索引（index），未形成版本记录，可以撤回；</li><li><strong>版本库：</strong>工作区有一个隐藏目录 <strong>.git</strong>，这个不算工作区，而是 Git 的版本库，提交后形成版本记录，不可撤回；</li></ol><h2 id="git基本操作"><a href="#git基本操作" class="headerlink" title="git基本操作"></a>git基本操作</h2><p><img src="../images/git%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/git-command.jpg" alt="img"></p><ol><li>workspace：工作区</li><li>staging area：暂存区&#x2F;缓存区</li><li>local repository：版本库或本地仓库</li><li>remote repository：远程仓库</li></ol><p>git常用命令：</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git config –global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config –global user.email 邮箱名</td><td>设置用户签名</td></tr><tr><td>git init</td><td>初始化本地库</td></tr><tr><td>git status</td><td>查看本地库状态</td></tr><tr><td>git add 文件名</td><td>添加到暂存区</td></tr><tr><td>git commit -m “日志信息” 文件名</td><td>提交到本地库</td></tr><tr><td>git reflog &#x2F; git log</td><td>查看版本历史概要&#x2F;详细记录</td></tr><tr><td>git reset –hard 版本号</td><td>版本穿梭，查看历史版本详细信息</td></tr></tbody></table><p>Note:</p><ol><li>签名的作用是区分不同操作者身份</li></ol><h2 id="git分支管理"><a href="#git分支管理" class="headerlink" title="git分支管理"></a>git分支管理</h2><p>版本控制通过分支进行，每一条分支代表一条独立的开发线，使用分支可以从开发主线上分离一个当前版本，用于开发或测试，当前分支的开发调试不影响主线。</p><p>git分支实际上是指向更改快照的指针</p><p>git分支常用命令</p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git checkout 分支名</td><td>切换至指定的分支，将工作区的内容替换当前指针最后提交内容</td></tr><tr><td>git checkout -b 分支名</td><td>切换至指定分支并创建该分支</td></tr><tr><td>git merge 分支名</td><td>分支合并，以当前所在分支为主分支进行合并</td></tr><tr><td>git branch</td><td>列出本地分支</td></tr><tr><td>git branch -d 分支名</td><td>删除分支</td></tr></tbody></table><h2 id="git团队协作机制"><a href="#git团队协作机制" class="headerlink" title="git团队协作机制"></a>git团队协作机制</h2><p>git远程仓库常用命令 </p><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git remote -v</td><td>查看当前仓库的所有别名</td></tr><tr><td>git remote add 别名 地址&#x2F;项目名</td><td>给当前仓库起别名</td></tr><tr><td>git remote rename 旧名 新名</td><td>别名换新</td></tr><tr><td>git push 仓库地址&#x2F;别名 分支</td><td>将当前本地分支项目推送到远程仓库</td></tr><tr><td>git pull  仓库地址&#x2F;别名 分支</td><td>从远程仓库拉取项目到本地分支</td></tr><tr><td>git clone 远程仓库地址</td><td>克隆指定远程仓库的项目</td></tr></tbody></table><h3 id="团队内协作"><a href="#团队内协作" class="headerlink" title="团队内协作"></a>团队内协作</h3><p>远程仓库管理者</p><ol><li>创建远程库</li><li>创建本地库并推送至远程库</li><li>邀请协作者加入团队</li></ol><p>仓库协作者</p><ol><li><p>克隆远程仓库到本地</p></li><li><p>修改代码并推送至远程仓库</p></li></ol><h3 id="团队间协作"><a href="#团队间协作" class="headerlink" title="团队间协作"></a>团队间协作</h3><p>远程仓库管理者</p><ol><li>创建远程库</li><li>创建本地库并推送至远程库</li><li>收到pull request后决定是否merge该分支</li></ol><p>仓库协作者</p><ol><li><p>Fork指定远程仓库（为什么是Fork）</p><p><img src="../images/git%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/image-20220607124251014-16545769938731.png" alt="img"></p></li><li><p>克隆Fork的远程仓库到本地</p></li><li><p>修改代码pull request推送分支至远程仓库</p></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ol><li><a href="https://www.runoob.com/git/git-tutorial.html">https://www.runoob.com/git/git-tutorial.html</a></li><li><a href="https://www.bilibili.com/video/BV1vy4y1s7k6?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click">https://www.bilibili.com/video/BV1vy4y1s7k6?spm_id_from=333.1007.top_right_bar_window_custom_collection.content.click</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
